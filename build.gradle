buildscript {
	dependencies {
		classpath "org.kohsuke:github-api:1.330"
	}
}

plugins {
	id "fabric-loom" version "${loom_version}"
	id "com.diffplug.spotless" version "8.0.0"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

// Override vulnerable dependencies until Minecraft updates to newer versions
configurations.all {
	resolutionStrategy {
		// v2.5.1, used by Minecraft 1.21.4 - 1.21.10, is vulnerable to CVE-2024-57699
		force "net.minidev:json-smart:2.5.2"
		// v2.13.4, used by Minecraft 1.21.4 - 1.21.10, is vulnerable to CVE-2025-52999
		force "com.fasterxml.jackson.core:jackson-core:2.15.0"
		// v3.17.0, used by Minecraft 1.21.4 - 1.21.10, is vulnerable to CVE-2025-48924
		force "org.apache.commons:commons-lang3:3.18.0"
		// v9.40, used by Minecraft 1.21.4 - 1.21.10, is vulnerable to CVE-2025-53864
		force "com.nimbusds:nimbus-jose-jwt:10.0.2"
		// v4.1.118.Final, used by Minecraft 1.21.5 - 1.21.10, is vulnerable to CVE-2025-58057
		force "io.netty:netty-codec:4.1.125.Final"
		// v4.1.118.Final, used by Minecraft 1.21.5 - 1.21.10, is vulnerable to CVE-2025-58056
		force "io.netty:netty-codec-http:4.1.125.Final"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
	
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// net.wurstclient.ai.PathPos extends net.minecraft.util.math.BlockPos,
	// which uses javax.annotation.concurrent.Immutable, which is part of
	// the JSR305 library.
	//
	// In other words, Wurst won't compile without this library,
	// even though it's Minecraft that actually uses it.
	modImplementation "com.google.code.findbugs:jsr305:3.0.2"
	}
	
loom {
	accessWidenerPath = file("src/main/resources/wurst.accesswidener")
}

configurations {
	productionRuntime {
		extendsFrom configurations.minecraftLibraries
		extendsFrom configurations.loaderLibraries
		extendsFrom configurations.minecraftRuntimeLibraries
	}
}

dependencies {
	productionRuntime "net.fabricmc:fabric-loader:${project.loader_version}"
	productionRuntime "net.fabricmc:intermediary:${project.minecraft_version}"
}

import net.fabricmc.loom.util.Platform
tasks.register('runEndToEndTest', JavaExec) {
	dependsOn remapJar, downloadAssets
	classpath.from configurations.productionRuntime
	mainClass = "net.fabricmc.loader.impl.launch.knot.KnotClient"
	workingDir = file("run")
	
	doFirst {
		classpath.from loom.minecraftProvider.minecraftClientJar
		workingDir.mkdirs()
		
		args(
			"--assetIndex", loom.minecraftProvider.versionInfo.assetIndex().fabricId(loom.minecraftProvider.minecraftVersion()),
			"--assetsDir", new File(loom.files.userCache, "assets").absolutePath,
			"--gameDir", workingDir.absolutePath
		)
		
		if (Platform.CURRENT.operatingSystem.isMacOS()) {
			jvmArgs("-XstartOnFirstThread")
		}
		
		jvmArgs(
			"-Dfabric.addMods=${configurations.modImplementation.find { it.name.contains('fabric-api') }.absolutePath}${File.pathSeparator}${remapJar.archiveFile.get().asFile.absolutePath}",
			"-Dwurst.e2eTest",
			"-Dfabric-tag-conventions-v2.missingTagTranslationWarning=fail",
			"-Dfabric-tag-conventions-v1.legacyTagWarning=fail",
			"-Dmixin.debug.verify=true",
			"-Dmixin.debug.countInjections=true"
		)
	}
}

processResources {
	def modVersion = project.version.substring(1)
	inputs.property("version", modVersion)
	
	filesMatching("fabric.mod.json") {
		expand(version: modVersion)
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.20.5 (24w14a) upwards uses Java 21.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
	
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	def archivesName = project.base.archivesName
	inputs.property("archivesName", archivesName)
	
	from("LICENSE.txt") {
		rename { "LICENSE-${archivesName.get()}.txt" }
	}
	
	exclude("intentionally_untranslated.json")
}

import com.diffplug.spotless.generic.LicenseHeaderStep
spotless {
	lineEndings = "WINDOWS"
	java {
		removeUnusedImports()
		leadingSpacesToTabs()
		trimTrailingWhitespace()
		eclipse().configFile(file("codestyle/formatter.xml"))
	}
	format("licenseHeader") {
		target("src/*/java/**/*.java", "src/test/java/**/*.java")
		def header_file = file("codestyle/license_header.txt")
		def delimiter = LicenseHeaderStep.DEFAULT_JAVA_HEADER_DELIMITER
		licenseHeaderFile(header_file, delimiter).updateYearWithLatest(true)
	}
	json {
		target "src/**/*.json"
		gson().indentWithSpaces(2).version("2.11.0")
	}
}

test {
	useJUnitPlatform()
}