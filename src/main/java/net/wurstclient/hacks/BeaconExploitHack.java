/*
 * Copyright (c) 2014-2025 Wurst-Imperium and contributors.
 *
 * This source code is subject to the terms of the GNU General Public
 * License, version 3. If a copy of the GPL was not distributed with this
 * file, You can obtain one at: https://www.gnu.org/licenses/gpl-3.0.txt
 */
package net.wurstclient.hacks;

// used some time to figure out, but worth it
// suprised myself that this works
// Thanks Skillclient for discovering!
// (and thanks me for figuring out)

import net.minecraft.entity.effect.StatusEffect;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.network.packet.c2s.play.UpdateBeaconC2SPacket;
import net.minecraft.registry.entry.RegistryEntry;
import net.wurstclient.Category;
import net.wurstclient.SearchTags;
import net.wurstclient.events.PacketOutputListener;
import net.wurstclient.hack.Hack;
import net.wurstclient.settings.EnumSetting;
import net.wurstclient.util.ChatUtils;

import java.util.Optional;

@SearchTags({"beacon exploit", "beacon spoofer", "regen 2"})
public final class BeaconExploitHack extends Hack
	implements PacketOutputListener
{
	
	private final EnumSetting<BeaconEffect> primaryEffectSetting =
		new EnumSetting<>("Primary Effect",
			"The primary effect to request from the beacon.\n"
				+ "Set both to Regeneration for Regen II.",
			BeaconEffect.values(), BeaconEffect.REGENERATION);
	
	private final EnumSetting<BeaconEffect> secondaryEffectSetting =
		new EnumSetting<>("Secondary Effect",
			"The secondary effect to request from the beacon.\n"
				+ "Set both to Regeneration for Regen II.",
			BeaconEffect.values(), BeaconEffect.REGENERATION);
	
	public BeaconExploitHack()
	{
		super("BeaconExploit");
		setCategory(Category.OTHER);
		addSetting(primaryEffectSetting);
		addSetting(secondaryEffectSetting);
	}
	
	@Override
	protected void onEnable()
	{
		EVENTS.add(PacketOutputListener.class, this);
	}
	
	@Override
	protected void onDisable()
	{
		EVENTS.remove(PacketOutputListener.class, this);
	}
	
	@Override
	public void onSentPacket(PacketOutputEvent event)
	{
		if(!(event.getPacket() instanceof UpdateBeaconC2SPacket))
		{
			return;
		}
		// can be done with pattern variable, but I think unnececary to do if
		// the if check returns false
		UpdateBeaconC2SPacket packet = (UpdateBeaconC2SPacket)event.getPacket();
		
		RegistryEntry<StatusEffect> primarySpoof =
			primaryEffectSetting.getSelected().getStatusEffectEntry();
		RegistryEntry<StatusEffect> secondarySpoof =
			secondaryEffectSetting.getSelected().getStatusEffectEntry();
		
		RegistryEntry<StatusEffect> primaryPacket =
			packet.primary().orElse(null);
		RegistryEntry<StatusEffect> secondaryPacket =
			packet.secondary().orElse(null);
		
		if(primaryPacket == primarySpoof && secondaryPacket == secondarySpoof)
		{
			return;
		}
		
		event.cancel();
		
		Optional<RegistryEntry<StatusEffect>> primaryOpt =
			Optional.ofNullable(primarySpoof);
		Optional<RegistryEntry<StatusEffect>> secondaryOpt =
			Optional.ofNullable(secondarySpoof);
		
		UpdateBeaconC2SPacket spoofedPacket =
			new UpdateBeaconC2SPacket(primaryOpt, secondaryOpt);
		MC.player.networkHandler.sendPacket(spoofedPacket);
		
		ChatUtils.message("Beacon effects spoofed:\n\tPrimary: [ "
			+ primaryEffectSetting.getSelected().getName() + " ], Secondary: [ "
			+ secondaryEffectSetting.getSelected().getName() + " ]");
	}
	
	public enum BeaconEffect
	{
		NONE("None", null),
		SPEED("Speed", StatusEffects.SPEED),
		HASTE("Haste", StatusEffects.HASTE),
		RESISTANCE("Resistance", StatusEffects.RESISTANCE),
		JUMP_BOOST("Jump Boost", StatusEffects.JUMP_BOOST),
		STRENGTH("Strength", StatusEffects.STRENGTH),
		REGENERATION("Regeneration", StatusEffects.REGENERATION);
		
		private final String name;
		private final RegistryEntry<StatusEffect> statusEffectEntry;
		
		BeaconEffect(String name, RegistryEntry<StatusEffect> statusEffectEntry)
		{
			this.name = name;
			this.statusEffectEntry = statusEffectEntry;
		}
		
		public String getName()
		{
			return name;
		}
		
		public RegistryEntry<StatusEffect> getStatusEffectEntry()
		{
			return statusEffectEntry;
		}
		
		@Override
		public String toString()
		{
			return name;
		}
	}
}
